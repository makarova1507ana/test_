 целью не функционального тестирования является проверка соответствия свойств
1:04:03
приложения с его не функциональными требованиями то есть при данном виде тестированием мы
1:04:08
проверяем как наша система работает по сути это тестирование свойств которые не
1:04:13
относятся к функциональности системы данные свойства определяются и функциональными требованиями таким
1:04:20
свойствам можно отнести например надежность то есть реакцию системы на непредвиденные ситуации и в данном
1:04:26
случае к данному свойству будет применимо такое тестирование как тестирование на отказ и восстановление
1:04:36
на английском это будет звучать файлового и и джейком руке стиль то есть
1:04:41
это исследование программной системы на предмет восстановления после ошибок и сбоев второе свойство это
1:04:48
производительность то есть работоспособность системы под разными нагрузками на самом деле тестирование
1:04:53
производительности это огромный пласт навыков инструментариев поэтому есть отдельные тестировщики которые
1:04:59
занимаются именно этим видом тестирования то есть если вы им заинтересуетесь конечно же можно
1:05:05
переходить на специализированные курсы учат читать специальную литературу и использовать уже техники тестирования
1:05:13
производительности своей практике что ж это такое тестирование производительности
1:05:20
это комплекс типов тестирования целью которого является определение
1:05:25
работоспособности стабильности потребления ресурсов и других атрибутов
1:05:30
качество приложения в условия различных сценариев использования и нагрузок и в
1:05:35
свою очередь тестирование производительности также можно разделить на несколько видов тестирования
1:05:44
при нагрузочное тестирование мы проверяем производительность при нормальных условиях
1:05:49
то есть если у нас заявлено что на сайте должно одновременно присутствовать тысячи пользователей мы создаем такие
1:05:55
специальные условия например в программе джей метр когда нагружаем нашу систему на количество пользователей которая
1:06:01
будет возможно чуть меньше этой тысячи и проверяем что все действительно og при
1:06:07
стресс-тестирование мы проверяем работоспособности нашей системы при экстремальных нагрузках когда например
1:06:14
на сайте присутствуют именно тысячи пользователей возможно даже больше тестирование стабильности представляет
1:06:20
собой опроверг у нашего приложения при длительной работе ну да мы здесь
1:06:26
объяснять не нужно объемное тестирование характеризуется тем что мы тестируем нашу систему преувеличенных
1:06:33
объемах обрабатываемых данных то есть например когда те же самые тысячи пользователей
1:06:39
отправляют одновременно энное количество мегабайт информации к следующему не
1:06:45
функциональному свойства можно отнести удобств то есть исследование удобств два работы с приложением с точки зрения
1:06:51
пользователя и это можно протестировать с помощью не заберёте testing то есть тестирование
1:06:56
удобства использования проверка юзабилити приложения заключается в том что мы оцениваем
1:07:02
соответствие дизайна приложения к его функциональности который задается заказчиком также здесь мы можем
1:07:08
исследовать используемые графические элементы цветовые оформления с точки зрения восприятия нашим
1:07:14
пользователям удобство навигации и ссылки которые есть у нас на данном сайте
1:07:20
анализ текстового наполнения сайта также существует такая характеристика как обучаемость например если наш
1:07:26
пользователь первый раз зашел на тот или иной ресурс насколько быстро он сможет сообразить как им пользоваться например
1:07:33
на своем каком-то предыдущем эксперименте когда он пользовался подобным приложением от нашего
1:07:40
конкурента поэтому если мы учтем все вот эти аспекты пользователь скорее всего перейдет к нашему конкуренту если вы
1:07:47
вдруг будет не удобно использовать наш продукт сейчас это тестирование очень распространено она имеет огромное
1:07:54
значение и опять же существует отдельные группы тестировщиков специалисты которые заточены именно на тестирование удобства
1:08:01
использования также есть специализированные курсы которые позволяют обучиться данным техникам еще
1:08:07
до свойства это безопасность то есть защищенность пользовательских данных это
1:08:12
тоже достаточно обширные направление в тестировании существует опять же
1:08:18
специальные тестировщики которые занимаются именно тестированием безопасности есть отдельные направления например здесь мы можем протестировать
1:08:25
насколько просто неавторизованный пользователь получит доступ к системе либо же насколько просто постороннему
1:08:32
лицу получить доступ к данным то здесь мы тестируем то как реализовано
1:08:37
защищенность нашего программного продукта еще одно такое свойства это паркеру имость
1:08:42
то есть переносимость нашего приложения на различные платформы здесь мы можем использовать такие типы тестирования как
1:08:49
тестирования установки и конфигурационные тестирование что касается тестирование установки то здесь
1:08:56
мы проверяем успешность установки приложения его настройке обновления и
1:09:01
удаления что касается конфигурационного тестирования то здесь мы исследуем
1:09:06
работоспособность программной системы в условиях различных программных конфигураций в данному виду тестирования
1:09:12
можно отнести кроссплатформенное и кроссбраузерная тестирование
1:09:18
я думаю здесь они стоят очень подробно объяснять что это такое думаю всем
1:09:23
понятно кроссплатформенная значит что мы тестируем наш продукта на различных
1:09:29
типах и версиях ios на примере с мы говорим о и белки то это может быть android либо ios и также при курс
1:09:36
бравлин им тестирование мы используем наше приложение на различных браузерах
1:09:41
будь то chrome и mozilla либо опера также стоит рассказать о тестировании локализации и тестирование
1:09:48
интернационализации очень чувству юмора тебя найти и такие
1:09:56
сокращения как l10 n-ой 18 м то есть не пугайтесь если вы их увидите возможно
1:10:02
где-то на собеседование будет какой-либо тестирование либо вас просит как можно сократить эти названия просто запомните
1:10:08
это по сути и сокращение от их английских названий что касается тестирование локализации это процесс
1:10:15
адаптации нашего программного продукта к языку и культуре клиента например если мы выходим на какой-то другой рынок
1:10:22
например англоязычные то мы должны проверить насколько наш продукт полностью
1:10:28
переведён на этот язык либо же возможно там используются какие-то финансовые
1:10:33
обозначения например фунта это мы тоже должны проверить еще можно к
1:10:39
этому отнести контроль формата даты и времени правовые какие-то особенности
1:10:44
того государственно которые мы выходим раскладкой клавиатуры пользователя контроль символики и цветов и другие
1:10:51
аспекты которые могут быть связаны с той ли иной локали на которой мы будем
1:10:57
представлять наш продукт в отличие от локализации тестирования
1:11:02
интернационализации включает в себя насколько наш продукт может дальнейшем
1:11:08
адаптироваться для той либо иной локали например при создании продукта мы должны
1:11:14
учесть возможность кодировке unicode то есть такого стандарта кодирования которые поддерживаются практически во
1:11:20
всех языках мира либо же мы должны предусмотреть в приложении возможность
1:11:25
поддержки элементов которые не возможно ли локализовать обычным образом например
1:11:31
это может быть вертикальный текст азиатских стран либо же чтения справа налево в арабских странах то есть даже
1:11:38
если мы на данный момент не используем наше приложение в азиатских странах к примеру то все равно нужно смотреть в
1:11:46
будущем что данное предложение может выйти и на эти рынки поэтому мы должны также и протестировать
1:11:52
интернационализацию есть такая градация как тестирование по исполнению сценария
1:11:59
иногда на собеседовании спрашивают пример что такое отход тестирование и не
1:12:05
все могут ответить на этот вопрос давайте немножко разберемся что это такое
1:12:12
здесь можно выделить два вида тестирования это исследовательское тестирование и эрг hoop тестирования
1:12:18
ведь как тестирования это hakko тестирования представляет собой тестирование без использования
1:12:24
каких-либо спецификаций планов и разработанных тест кейсов это ваша
1:12:29
чистая импровизация то есть например вы в первый раз получили приложения и на каком-то своем
1:12:35
эмпирическом традиционном уровне понимаете как с ним
1:12:41
нужно работать исследовательское тестирование в отличие от хок более формальная версия тестирование она не
1:12:48
требует написание тест кейсов но в то же время подразумевает что каждый последующий тест выбирается на основании
1:12:55
результаты предыдущего теста и даже если вы знаете как работает ваше приложение то есть вы его не в первый раз видите то
1:13:04
вы можете также следовать какому-то плану не обязательно его документировать то есть вы знаете что в таком-то модуле
1:13:10
есть такой-то ожидаем результат и вы это тестируйте но не оформляете это
1:13:16
посредством тестовой документации и последнее это сценарное тестирование то есть это наша классическое тестирование
1:13:23
по предварительно написанным и уже задокументированным тестовым сценарием
1:13:29
еще есть такая классификация как по запуску года если вы вспомните урок мой
1:13:37
дефекации и валидации мы говорили с вами о том что верификация это статическая проверка а валидация это динамическая
1:13:44
проверка это применимо и к данной классификации то есть есть статическое
1:13:51
тестирование и динамическое тестирование при статическом тестирование
1:13:57
не предполагается что программный код время тестирования будет выполняться то
1:14:03
есть мы его не запускаем статическое тестирование начинается на ранних этапах жизненного цикла программного
1:14:08
обеспечения и является соответственной части процесса верификации сюда можно
1:14:14
включить тестирование любых форм документации на первую читку кода инспекцию проектной документации
1:14:21
функциональных спецификаций и наших требований что касается динамического
1:14:26
тестирования то это такой тип тестирование которое предполагает запуск программного кода таким образом
1:14:32
анализируется поведение программы во время ее работы возвращаясь еще к ним функциональному тестирование я немножко
1:14:38
подзабыл вам рассказать что есть еще от тестирования gui то есть графического
1:14:44
интерфейса пользователя то есть это проверка соответствия приложения требованием графическому
1:14:51
интерфейсу насколько профессионально она выведет выполнена алиана в едином стиле то есть
1:14:57
на то мне месте находится те кнопки которые у нас есть нам окапи то есть шаблоне который предоставил нам дизайнер
1:15:03
есть все это мы проверяем в при тестировании gui и есть еще такое интересное направление как тестирование
1:15:09
доступности либо же на английском это звучит access
1:15:15
убивать testing то есть здесь мы проверяем соответствие по общепризнанным
1:15:20
стандартам доступности оно должно быть доступно для использования людьми с ограниченными возможностями есть
1:15:27
отдельный документ который регламентирует то как наше приложение должно быть доступно для вот таких вот
1:15:33
людей опять же это отдельное направление в тестировании поэтому я не буду под более подробно
1:15:40
останавливаться на нем но она очень интересная стоит отметить что многие заблуждаются в
1:15:46
том что люди с ограниченными возможностями должны иметь какие-то проблемы со здоровьем которые мешают им
1:15:51
пользоваться нашим программным обеспечением на самом деле это не совсем так таким людям например можно отнести
1:15:57
тех кто примеру едет в машине и сконцентрирован она движение то есть
1:16:04
смотрит на дорогу однако в то же время он пользуется каким-то гаджетом то есть
1:16:10
он ограничен своих возможностях он не может этого видеть во что происходит на экране своего смартфона но может
1:16:17
например слышать либо если у женщины есть ребенок она его держит на одной руке и пользуется опять же на чем
1:16:23
гаджетом смартфоном то она должна пользоваться только одной рукой это
1:16:28
ограничивает ее в движениях и также мы должны предусмотреть такую возможность поэтому не всегда люди с ограниченными
1:16:36
возможностями это люди у которых есть какие-то проблемы со здоровьем вот такое объемное заключительное занятие по классификации
1:16:43
тестирования у нас получилось сначала я думаю разделите бой на несколько но понял что мы и так уделяли огромное
1:16:49
внимание данной теме поэтому надеюсь что вам было интересно если возникли какие
1:16:55
то вопросы то обязательно задавайте их комментариях подписывайтесь на данный канал ставьте ваши лайки мне важна ваша
1:17:02
поддержка а на этом у меня все милости прошу к нашему шалашу пока
1:17:08
[музыка]
SDLC. Модели разработки ПО
1:17:17
привет youtube на сегодняшнем занятии мы продолжаем изучение тестирования и
1:17:23
поговорим о моделях разработке программного обеспечения за исключением пожалуй гибких
1:17:29
методологий и джайв эта тема достаточно объемная поэтому ей будет посвящен
1:17:35
отдельный урок и первая модель который вы с вами говорим это классическая
1:17:41
модель разработки программного обеспечения она называется водопадная либо каскадная
1:17:48
на английском языке вот и фол в этой модели каждый этап разработки
1:17:53
соответствующей стадии жизненного цикла про продолжает предыдущую все вы можете
1:17:59
увидеть схему вода платной модели она уже вам знакомы на самом первом уроке мы ее обсуждали что хотелось бы отметить из
1:18:07
особенностей данной модели как вы видите для того чтобы перейти на новый так мы
1:18:13
полностью должны завершить текущем то есть если мы говорим об этапе сбора
1:18:19
требований мы не можем прийти на этап анализа пока не закончен сбор требований
1:18:26
тоже касается этапы дизайна кодирование разработки тестирования и поддержки
1:18:32
нашей системы каскадная модель достаточно просто и понятно но она уже
1:18:38
немножко устарела и не так практично как раньше так как сейчас у нас эпоха
1:18:43
динамично изменяющихся и развивающихся требований такой вот структурированный
1:18:49
процесс может из преимуществ которые раньше давала эта система превратиться в
1:18:56
некоторые недостатки давайте поговорим о таких плюсах и минусах водопадный модели
1:19:01
что касается плюсов каскадной модели топни можно отнести полное документирование каждого этапа то есть
1:19:08
нам всегда будут доступны четкие требования также мы всегда можем четко
1:19:14
спланировать наши и сроки и затраты и для заказчика наши процессы будут
1:19:19
достаточно прозрачны потому что он будет знать в какое время запускается тот или
1:19:25
иной этап сколько времени потратит на его релиза акцию и может спокойно это
1:19:30
отследить что касается минусов водопадный модели то к ним можно отнести следующие во-первых до начала проекта необходимо
1:19:38
утвердить полный объем требований к системе в случае необходимости внесения
1:19:44
изменений требований позднее мы не можем вернуться к первой стадии и нам будет
1:19:50
необходимо переделать заново всю нашу работу и так же к минусам можно отнести
1:19:56
увеличение затрат средств и времени случае необходимости изменения требований как я уже сказал мы в таком
1:20:04
случае должны будем вернуться на самый первый этап начать работу заново мы
1:20:09
вписали все плюсы и минусы давайте теперь поговорим когда же вообще используются такая модель разработать по
1:20:16
во-первых проектах с четко определенными требованиями для которых не предусматривается их изменения в
1:20:23
процессе разработки самый первый пример который приходит мне в голову это некоторые госучреждения либо какие-то
1:20:30
банковские структуры обычной именно в них используется данная модель разработки как же она
1:20:38
используется для проектов которые мигрируют с одной платформы на другую то
1:20:43
есть требование остаются такими же и меняется только некое системное окружение
1:20:48
либо же когда от компании разработчика не требуется проводить тестирование к
1:20:54
примеру если компания занимается только разработкой программного кода а уже тестирование
1:21:01
будет делать сам заказчик либо какая-то другая сторона к следующей модели
1:21:06
разработки можно отнести де модель b v-образную модель в разработке
1:21:11
программного обеспечения на является модифицированной версии классической каскадной модели здесь уже как вы можете
1:21:18
видеть на схеме на каждом этапе происходит контроль текущего процесса
1:21:24
для того чтобы убедиться в возможности перехода на следующий уровень в этой
1:21:30
модели тестирования начинается еще со стадии написание требований причем для
1:21:36
каждого последующего этапа предусмотрен свой уровень тестового покрытия здесь процесс разработки представлен некой
1:21:44
нисходящие последовательностью в левой части условной нашей буквы vie стадии
1:21:50
тестирования на ее правом ребре соответствие этапов разработки и
1:21:56
тестирования показано горизонтальными линиями плюсами и минусами ли модель
1:22:01
являются следующие во первых у нас есть строгие этапы это мы говорим о плюсах во
1:22:08
вторых планирование тестирования и верификация самой системы производится
1:22:13
на ранних этапах мы пишем раннее тестирование что соответствует принципу тестирования
1:22:20
которым я говорил на одном из наших предыдущих уроках и у нас есть такой
1:22:27
этап как промежуточное тестирование то есть когда мы говорили о каскадной модели мы не могли проводить крошечное
1:22:34
тестирование она была строго за этапом разработки нашего по здесь же мы можем
1:22:40
проводить тестирование на каждом уровне что касается минусов все равно здесь у нас остается
1:22:46
негибкости нашей модели само написание и создание программы
1:22:53
происходит на этапе написания кода то есть как мы видим из
1:23:00
нашей схемы то на середине процесса разработки и
1:23:06
у нас нет возможности динамического внесения каких-либо изменений
1:23:12
потому что все равно здесь все этапы идут друг за другом когда же у нас используется данная
1:23:19
модель разработки обычно проектов которых существуют какие-то временные и
1:23:26
финансовые ограничения и для таких задач которые предполагают более широкое по
1:23:34
сравнению с предыдущей каскадной моделью тестовое покрытие вот так выглядит наш
1:23:40
финальный майнд-мап надеюсь что у вас не возникло вопросов о данной модели
1:23:45
разработке программного обеспечения и давайте перейдем к следующей до этого мы с вами говорили о последовательных
1:23:52
моделях разработки программного обеспечения но не все модели жизненного цикла
1:23:58
последователями существуют также итерационные либо же
1:24:03
инкрементальные модели в которых используются совсем другой подход здесь
1:24:09
место 1 продолжительной последовательности действий весь жизненный цикл продукта разбит на ряд
1:24:17
отдельных не не циклов и стоит отметить что каждый такой цикл состоит из тех же
1:24:23
этапов что и в других моделях разработки программного обеспечения
1:24:28
и вот такие вот мини циклы называют итерации в каждой итерации происходит
1:24:33
разработка отдельного компонента системы после чего этот компонент добавляется к
1:24:39
уже ранее разработанную функционалу и вот это вот все вместе называется инкремент я думаю каждому из вас знакома
1:24:47
такая модель как бленду чип и акт и каждый этап разработки соответствует
1:24:52
какому-либо из этих секторов например плен это будет это планирование и сбора
1:25:00
требований сектор дух это когда мы анализируем и что-то рисуем создаем
1:25:06
дизайн а также пишем программный код testing это будет сектор чек и икт это
1:25:13
фаза review оценка пересмотр текущих требований и предложения дополнений к
1:25:20
ним и в конечном итоге достигается . когда все требования будут воплощены в
1:25:27
нашем продукте и происходит релиз давайте теперь поговорим о плюсах и
1:25:32
минусах данной модели во-первых к плюсам можно отнести то что у нас происходит
1:25:39
ранее создание работающего по так как итерации у нас обычно не большие по
1:25:44
времени мы можем предоставлять какую-то часть функциональности и нашего продукта
1:25:50
за небольшой промежуток времени и очень быстро также можно отнести к плюсам то что
1:25:58
такие системы обычно очень гибки то есть они готовы к изменениям требований на
1:26:04
любом из этапов разработки водки как я уже сказал выше таки итерации
1:26:10
занимают и небольшой промежуток времени если мы говорим о таком фреймворке в
1:26:15
гибкой методологии как и джейн то обычно это от двух недель до четырех нитей а
1:26:21
именно итерационная модель и стало родоначальником таких вот гибких методологий
1:26:27
поэтому всегда проще провести тестирование и анализ рисков именно для
1:26:33
такой небольшой части нашего жизненного цикла продукта и
1:26:39
если мы говорим о минусах то каждая фаза это самостоятельная какая-то единица и
1:26:46
отдельные итерации друг на друга не накладываются и в отличие от более классических моделей
1:26:56
например если даже взять то уже каскадную модель не всегда все
1:27:01
требования известных начала проектирования это также может усложнить
1:27:06
работу и реализацию общей архитектуры нашей системы
1:27:12
когда же все таки применять противную модель но обычно она хорошо подходит для
1:27:17
каких-то крупных проектов когда нам известны не все требования но известны
1:27:22
хотя бы какие-то ключевые milestone и ключевые требования и когда требования
1:27:28
мы точно знаем что будут меняться в процессе разработки и как я уже сказал
1:27:34
именно итерационной оперативная модель стало родоначальником гибких подходов к разработке
1:27:41
программного обеспечения а гибких походах мы поговорим с вами на одном из следующих уроков это все что я
1:27:49
хотел вам рассказать в рамках данного занятия надеюсь что она была как обычно
1:27:55
вам полезно и вы теперь немножко больше стали понимать и разбираться во всех
1:28:01
моделях которые есть в разработке по и когда вы придете на работу в какую-либо
1:28:06
компанию где применяется одна из этих моделей вы не растеряетесь и сможете быстро сообразить как работать в реалиях
1:28:14
именно данной модели вопрос о моделях разработки по достаточно часто спрашивают на
1:28:20
собеседовании поэтому обязательно ли себя отметьте плюсы и минусы каждой из этих
1:28:27
методологий и обязательно запомните где они могут применяться а на этом у меня
1:28:33
все подписывайтесь на данный канал как обычно новое видео не заставит себя долго ждать увидимся с вами совсем скоро
1:28:41
милости прошу к нашему шалашу пока [музыка]
Чек-листы и тест-кейсы
1:28:55
привет youtube сегодняшний урок будет посвящен таким тестовым артефактом как к
1:29:01
тест кейсы и чек-листы ведь именно от их правильного создания в первую очередь
1:29:07
будет зависеть эффективность вашего тестирования также возможность других
1:29:13
участников команды будь то тестировщик либо же даже разработчик
1:29:19
беспрепятственно разобраться проведение теста и его запуске существует два
1:29:27
основных вида тестовой документации для того чтобы провести правильный тест это
1:29:32
чек-лист и тест кейс давайте с вами начнём с более простого вида теста вы
1:29:38
документации а именно чек-лист если мы говорим о чек-листе того в первую
1:29:44
очередь это некий список проверок в котором показано что мы будем
1:29:49
тестировать и как следствие результат и статус данных проверок сам этот список
1:29:55
содержит в себе то что мы собрались вообще сделать что мы не хотим забыть и
1:30:02
что непосредственно мы будем проверять то есть это некий
1:30:07
высокоуровневые набор идей наших тестов давайте с вами взглянем на основные
1:30:12
моменты которые могут быть в хорошем чуть листе во первых эта версия нашей
1:30:18
сборки непосредственно то окружение на котором проводилось тестирование дата проведения нашего теста и
1:30:26
тот тестировщик который проводил данное тестирование также в чек-листе может быть тип тестов
1:30:34
который был использован для тех или иных проверок непосредственно названия самих проверок и результат нашего тестирования
1:30:41
то есть прошла эта проверка или нет и также для упрощения нашей работы взяты
1:30:49
какие-то отдельные модули нашего приложения основные модули и для них уже на расписаны все проверки как вы видите
1:30:56
название чек-листа отражает название приложения наше тестовое приложение было
1:31:02
калькулятором то есть для него мы использовали вот такой перечень power также в чек-листе может содержаться
1:31:09
также через те может содержаться список уникальных идентификаторов для
1:31:14
каждой проверке чтобы также можно было спокойно найти их в нашей системе и дать
1:31:20
на них ссылку каких-то других артефактах которые мы будем использовать при
1:31:25
тестировании также может быть ссылка на обнаруженный нами бак если опять же у
1:31:32
нас данный чек-лист уже используются в некой бог треккинговой системе ему уже по результату какой-либо проверки можем
1:31:39
завести бак если фактический результат отличается от ожидаемого так же в
1:31:45
описании к этому видео я дам ссылки на те материалы которые помогали мне
1:31:50
разобраться в этом вопросе то есть будут некий образцы чек-листов которые вы также можете использовать и своей
1:31:56
подготовки для того чтобы набить себе руку и в дальнейшем использовать их для выполнения тестовых заданий либо же на
1:32:03
своей основной работе давайте с вами зак инспектирует то что касается чек-листа
1:32:09
как я уже сказал это список проверок который показывает что тестировать и
1:32:16
обязательно должен себе содержать результат наших проверок
1:32:22
давайте с вами теперь поговорим о другом видео артефакта в другом виде тестовой документации о тест кейсах данный вид с
1:32:31
твой документации отличается от то чекиста следующем во первых здесь у нас
1:32:37
уже будут шаги то есть это некий пошаговый сценарий здесь уже будет
1:32:42
низкоуровневые проверки то есть они будут более детализированы и в отличие от чек-листа в которой мы говорили что
1:32:49
мы будем тестировать здесь мы уже расписываем как мы будем тестировать опять же здесь будет результат наших
1:32:57
проверок также в тест кейси обязательно должен быть заголовок
1:33:03
возможно будет приоритет либо же порядок выполнения нашего тест
1:33:09
кейса и еще ряд твоего некоторых атрибутов про которые я расскажу вам
1:33:16
чуть позже самое главное что вы должны усвоить при составлении тест кейса что здесь у нас
1:33:23
есть некоторая троица основных атрибутов это наш выполняемое действие
1:33:29
то есть пошаговый сценарий ожидаемый результат и фактический результат
1:33:35
в дальнейшем наши тест кейсы могут собираться в набор и тест кейсов которые
1:33:40
называются т с ю давайте с вами тоже пометим что есть такой вид
1:33:46
документации тест набор ибо же тест сьют
1:33:51
на английском иногда т с ю там называют набор тест
1:33:56
кейсов которым результат выполнения каждого тест кейса является некоторые не
1:34:04
при комическими пред условиями для начала выполнения следующего то есть эти кейсы идут друг за дружкой по порядку и
1:34:11
давайте с вами теперь посмотрим как вообще составляется т с ю как это может
1:34:16
выглядеть специально для этого мы создадим отдельный документ в котором и
1:34:22
будем дальнейшем вводить наши тест кейс давайте назовем каждый столбец согласно
1:34:29
тем атрибутом которые должны быть в хорошем тест кейси первых должен быть
1:34:35
идентификатор он будет уникальный для каждого нашего тест queries а
1:34:42
также может быть такой атрибут как приоритет либо же в данном столбце может быть
1:34:49
написано вид теста который используется для данной проверки также здесь может быть ссылка на требования с которым
1:34:56
связан наш тест кейс то есть то требования которое мы проверяем в ходе данной проверки также было бы неплохо
1:35:03
указать название модуля дальше расписывается заглавие
1:35:10
которым будет отражаться основная суть нашего тест кейса дальше расписываются
1:35:15
шаги по воспроизведению нашего тест кейса и последним может быть ожидаемый
1:35:22
результат обычно он расписывается по каждому шагу однако не всегда это
1:35:28
необходимо и порой важен результат расписывают только для последнего шага но если же мы говорим о данном документе
1:35:35
о тестовых кейсах для обучения будущих сотрудников например если вы придете в
1:35:41
какую-то компанию те будут расписаны хорошо тест кейсы то есть будут хорошо
1:35:46
задокументирован ее шаги по воспроизведению данного тест кейса а также расписан ожидаемый результат на
1:35:53
каждый шаг вам будет проще обучиться работе в данной системе узнать про нее
1:35:59
то есть тест кейсы очень часто используется для обучения сотрудников
1:36:04
для того чтобы не сформировалось представление о программе это способствует быстрому усвоению
1:36:11
информации и отбор один год специалисты на проект и также у нас должен быть
1:36:17
фактически языка если мы говорим о том что у нас уже прописан ожидаемый результат
1:36:23
т.е. сейчас мы с вами создали шаблон для заполнения тест кейсов в рамках экселя в
1:36:30
небольших компаниях могут использовать к примеру google таблицы для того чтобы управлять своими тест кейсами и делиться
1:36:39
ими с другими участниками команды или если мы говорим о каких компаниях
1:36:44
которые могу тебе позволить какие-то платные ресурсы для треккинга тест
1:36:49
кейсов и их исполнения то тогда можно приобрести примеру this trail и работать
1:36:55
в нем либо же есть такая система как тест link ouji рыбак треккинговой
1:37:00
системе которые мы поговорим с вами чуть позже есть также плагин зефир который позволяет хранить тест кейсы запускать
1:37:09
их то есть это все зависит от тех финансовых возможностей которыми обладает компания также вы можете для
1:37:16
себя зарегистрироваться в сестре или там есть реальная версия на 30 дней и также
1:37:24
попробовать по заводить там тест кейсы по запускать их посмотреть как она работает эта система прощупать и и
1:37:30
поэтому все зависит только от вас в рамках данного занятии мы не будем с вами работает и строили там все
1:37:36
достаточно просто интуитивно понятно но для того чтобы вы поняли как вообще
1:37:42
заполнять тест кейс что нужно указывать им давайте с вами попробуем создать один
1:37:48
такой тест кейс все достаточно просто если мы говорим про идентификатор то
1:37:54
здесь какой-то будет уникальный номер давайте присвоим ему номер один
1:38:00
приоритет здесь либо мы расписываем приоритет выполнения например это будет первый порядковые номера мы запускаем
1:38:07
этот тест первым ибо же здесь мы можем написать вид теста который мы используем
1:38:12
к примеру это будет смоук так как к требование у нас нет мы можем взять
1:38:19
какой-нибудь из головы опять же давайте возьмем рек один модуль регистрация нового пользователя
1:38:29
если мы говорим про заглавие давайте сюда запишем к премьеру
1:38:36
регистрации нового пользователя с помощью
1:38:43
мобильного телефона до стоит отметить что у вас в голове
1:38:49
должно устояться такая модель создания тестовых кейс в первую очередь мы создаем простые тест
1:38:56
кейсы затем мы создаем сложные говоря простых сначала мы создаем позитивные
1:39:01
сценарии если бы с вами вспомним урок посвященный позитивным и негативным тестом и
1:39:08
рассказывал основную разницу них и что необходимо делать первым вкратце напомню
1:39:14
что сначала мы создаем всегда позитивный сценарий так как в первую очередь мы проверяем
1:39:19
тот факт что наша система работает согласно нашему требованию как-то была
1:39:25
запланирована и нашему заказчику будет интересно сначала узнать что
1:39:30
действительно система отрабатывает те сценарии позитивные сценарии и
1:39:37
может спокойно уже запускаться для наших пользователей и использоваться
1:39:44
ими сверху сейчас появится ссылка на занятия посвящены и негативными позитивным тестом тем более подробно
1:39:51
рассказывал об их отличий и порядке их запуск обязательно переходите на нее чтобы освежить память и эту информацию
1:39:58
давайте теперь поговорим о таком блоке как шаги к примеру
1:40:04
запустить сайт вести в поле
1:40:10
мобильный номер телефона дождаться
1:40:16
sms с кодом ввести код в в появившемся поле
1:40:24
нажать кнопку регистрация положим вот такие у нас шаги
1:40:32
для данного тест кейса давайте исправим не запустить сайт открыть сайт
1:40:39
также здесь должна быть ссылка на этот сайт и теперь по каждому шагу мы должны
1:40:46
написать наш ожидаемых le date открыть сайт предположим загружается сайт вести в
1:40:53
поле мобильный номер телефона номер телефона отображается более
1:41:01
мобильный код приходит на номер телефона
1:41:08
код отображается в новом поле появляется
1:41:15
сообщение об успешной регистрации и
1:41:21
теперь когда мы будем с вами выполнять непосредственно наш тест кейс мы будем
1:41:26
сравнивать ожидаем результат с нашим фактическим результатом и в случае
1:41:32
обнаружения несоответствия мы можем завести дефект давайте сами тоже добавим сюда
1:41:40
такой столбец и сюда мы будем просто вставлять
1:41:45
номер нашего дефекта чтобы в дальнейшем можно было отследить спокойно где он
1:41:51
находится и с каким нашим с кейсом он связан вот так
1:41:58
выглядит тестовый кейс в рамках экселя как я уже
1:42:04
сказал есть отдельные системы в которых это все можно отслеживать заводить наши
1:42:09
тест кейсы запускать их непосредственно в этой системе поэтому я думаю с этим у
1:42:14
вас не возникнет никаких проблем очень часто работодатели
1:42:19
высылает тестовые задания в которых просят написать тестовые кейсы для определенного модуля
1:42:26
либо проверки какой-либо функциональности поэтому вам нужно хорошо разобраться в создании тестовых
1:42:32
кейсов набить себе руку и в дальнейшем использовать вот такой вот шаблон для
1:42:38
того чтобы успешно проходить такие тестовые задания также
1:42:43
на самих собеседованиях очень часто показывают какую-либо функциональность например скрин экрана какого-нибудь
1:42:51
приложения в котором также просят написать какие-либо тестовые кейсы уже в
1:42:56
рамках вашего технического собеседования технического интервью также хотелось бы отметить тот факт что как вы уже могли
1:43:04
заметить здесь используются безличные глаголы то есть мы никогда не пишем вот
1:43:11
такие голы как открываем открою то есть всегда мы ставим себя на место какого-то
1:43:18
неизвестного пользователя который будет выполнять эту задачу поэтому здесь должно быть все
1:43:25
максимально и безлично чтобы человек про читая ваши шаги и ожидаемый результат мог
1:43:32
без привязки к какой-либо личности провести этот тест кейс забегая немножко
1:43:38
вперед какая же модель используется при создании отчетов и дефектов но когда мы используем какие-либо а безличные
1:43:45
глаголы при описании того или иного действия и в заключение нашего занятия я
1:43:52
бы хотел вам еще раз сказать о критериях для выбора той или иной тестовой
1:43:58
документации на проекте во первых это зависит от сложности вообще нашего
1:44:04
проекта если мы говорим каком-то простом проекте то вполне достаточно использовать чек-лист если же наш проект
1:44:12
усложняется там есть очень много требований которые достаточно сложны в реализации и в них есть очень много
1:44:19
аспектов которые мы должны проверять вот так же необходимо какие-то более подробные проверки то тогда конечно же
1:44:27
лучше использовать тест кейсы второй аспект это длительность нашего проекта если мы говорим каких-то
1:44:33
небольших проектов по длительности то логичнее использовать чек-листы если же
1:44:39
наш проект долги то тогда использую the test кейсы также
1:44:45
со сложностью проекта связан и его размер то есть чем больше проект чем больше людей задействованы в нем если
1:44:52
есть вероятность того что в команду нашу будут приходить новые специалисты которых нужно будет обучать то опять же
1:45:00
здесь лучше использовать тест кейс и опять же если говорить о
1:45:05
самой команде если она часто меняется то есть вот тут такой аспект как стабильность опять же используют тест
1:45:13
кейсы если наши требования не подвержены очень сильным изменениям то тогда также
1:45:21
лучше использовать тест кейсы так как их достаточно сложно поддерживать то есть
1:45:28
если мы изменяем наш требование очень часто нужно постоянно вносить изменения и в тест кейс с 400 обработать проще как
1:45:36
вы видели это простой документ то есть там расписаны просто какие-то общие вещи о нашей необходимые проверки и внести
1:45:43
изменения в них очень просто и не стоит забывать о том что
1:45:48
во многом выбор той или иной тестовой документации может зависеть от желания
1:45:54
нашего заказчика например даже если наш проект простой и быстрый он наш заказчик
1:46:01
хочет быть более вовлечена в процесс чтобы этот процесс был для него
1:46:06
прозрачен он может выбрать такую тестовую документацию как тест кейсы и в таком случае мы не сможем отказать ему и
1:46:13
будем использовать именно их в своей работе на сегодня у меня все надеюсь что
1:46:20
данное занятие помогло вам разобраться в таких видах тестовой документации как чек-листы и тест кейсы и вы без проблем
1:46:27
сможете их использовать при выполнении тестовых заданий от ваших будущих
1:46:32
работодателей либо же для успешного прохождения собеседования и в дальнейшем
1:46:38
использовании вот этих вот техник для того чтобы эффективно и успешно
1:46:45
создавать тестовую документацию уже на ваших текущих проектах на следующем
1:46:50
занятии мы поговорим о двух самых популярных техниках тест дизайна которые также частенько спрашивают на
1:46:57
собеседовании и в ходе интервью и в дальнейшем вы сможете использовать эти
1:47:02
техники тест дизайна для создания ваших оптимальных тестовых кейсов и проверки
1:47:10
приложение в максимально короткие сроки но с максимальной эффективностью как для вас так и для вашего заказчика будет
1:47:18
здорово если вы подпишетесь на данный канал и оставить свою обратную связь к этому видео увидимся с вами на следующем
1:47:26
занятии милости прошу к нашему шалашу пока
1:47:31
[музыка]
Техники тест-дизайна
1:47:40
привет youtube на данном уроке мы поговорим о двух самых известных и
1:47:46
популярных техниках то есть дизайна которые я использую своей работе и
1:47:51
которые чаще всего спрашивают на собеседовании и при выполнении тестовых
1:47:56
заданий на самом деле таких техник то из дизайна существует гораздо больше и
1:48:02
более подробно со всеми ими вы можете ознакомиться в книге легко плент и
1:48:09
прокси не сгорит the software design название которой я оставлю обязательно в
1:48:14
описании давайте разберемся что же такое test design это этапа процесса тестирования
1:48:21
нашего программного обеспечения на котором проектируются и создаются
1:48:26
тестовые случаи либо тест кейсы о которых я говорил на прошлом занятии в
1:48:33
соответствии с определенными ранее критериями качества и целями
1:48:38
тестирования то есть простыми словами это придумывание наших тестов то есть их
1:48:45
разработка у тест дизайна есть две основные цели во первых это то что мы
1:48:51
должны придумать такие тесты которые могли бы обнаружить наиболее серьезные
1:48:57
ошибки для нашего продукта а вторая цель это минимизация количества таких тестов
1:49:03
и раз мы уже разобрались что же такое test design давайте поговорим об этих
1:49:10
двух популярных методиках которые используют тестировщики в своей работе
1:49:15
чуть ли не каждый день во первых это эквивалентно и разбиение либо же тестирование классов эквивалентности
1:49:22
а второй тип это анализ граничных значений и начнем конечно же сок и
1:49:28
валентного разбиения давайте с вами сначала разберемся что же такое класс эквивалентности
1:49:36
это входные данные которые обрабатываются нашим приложением
1:49:42
одинаково либо же обработка которых приводит к одному и тому же результату и
1:49:48
того чтобы разобраться в класс эквивалентности сразу приступим к разбору следующего
1:49:56
примера нас есть задачу представим что существует некоторое
1:50:02
компания в которой в зависимости от возраста соискателей будет приниматься
1:50:09
решение брать этого человека на работу или нет условия для нашего примера будут
1:50:14
следующие если возраст нашего соискателя от 0 до 12 мы не нанимаем такого
1:50:19
сотрудника если возраст от 14 до 17 то здесь будет на spare time
1:50:29
если от 18 предположим до 55 это full-time и
1:50:38
от 56 до 99 не нанимаем таких сотрудников и как мы с
1:50:46
вами видим мы уже сформировали 4 класс эквивалентности как я уже сказал это
1:50:51
некий диапазон значений которые обрабатываются нашей системы одинаково либо же обработка диапазона которого
1:50:59
приходит к одинаковому результату то есть например для возраста от 0 до 12
1:51:04
результат мы не нанимаем таких сотрудникам вот это уже можно взять как один класс эквивалентности
1:51:10
как вы видите у нас уже есть 4 класса то есть это некоторые позитивные классы но
1:51:16
также если мы с вами вспомним о позитивных и негативных тестах также
1:51:22
есть и позитивные и негативные класс эквивалентности если мы говорим о возрасте сотрудников
1:51:30
которые мы не нанимаем также мы с вами сможем уйти за пределы 0 то есть взять
1:51:36
например такой диапазон как от минус бесконечности до 0 такие значения также можно принять и
1:51:45
если мы говорим о сотрудниках которые их мы не нанимаем также сюда можно отнести
1:51:51
от 100 топлива с бесконечности это тоже класс эквивалентности плюс ко всему мы
1:51:57
скорее всего будем использовать именно эти числа некое поле ввода в поле воды
1:52:03
мы можем ввести примеру буквы ибо же спец символы и это также у нас
1:52:08
будет класса микки валентности негативными классами эквивалентности то есть все это мы можем учесть при нашем
1:52:15
тестировании и давайте с вами прийдем к основным правилам данной техники тест
1:52:20
дизайна их 2 одно из которых мужа с вами выполнили во первых это определение
1:52:26
классов и валентности и второе правила проведения хотя бы одного
1:52:32
теста для 1 класса то есть мы должны взять хотя бы одно значение из класс
1:52:39
эквивалентности для того чтобы нам подтвердить тот факт что система
1:52:45
обрабатывает все значения в этом классе одинаковым возвращаясь к нашим основным
1:52:51
позитивным классом то есть мы берем из каждого класса по одному значению чаще всего советуют брать значение из
1:52:58
середины данного класса например если мы говорим отвали от 12 до середины здесь будет либо 6 либо 7 то есть это значение
1:53:05
мы и будем тестировать так мы делаем для каждого класса включая наши негативные классы эквивалентности про которые я
1:53:12
говорил чуть раньше это то что касается техники и к валентного разбиения то есть
1:53:18
мужа с вами видим как мы упростили нашу работу и в дальнейшем повысили эффективность и время на проведение
1:53:25
наших тестов вспоминая урок посвященные основным принципом тестирования один из
1:53:31
принципов гласит что исчерпывающее тестирование невозможно и именно данная техника то есть дизайна
1:53:38
позволяет нам действительно использовать только одно значение и не проводить к
1:53:45
примеру как здесь 14 тестов на данный класс эквивалентности вторая техника тыс
1:53:51
дизайна которая очень сильно связано с валентным разбиением либо же
1:53:56
тестирование класс эквивалентности это анализ граничных значений
1:54:02
возвращаясь к нашим определенным классам и валентности к позитивным здесь мы
1:54:07
видим границы этих классов то есть это 0 13 14 1718 55-56 99 плюс также эти
1:54:16
границы есть и для наших негативных классов мы сейчас мы давайте с вами
1:54:22
остановимся более подробно на позитивных что же под собой подразумевает данный
1:54:28
анализ граничных значений первое правило здесь такое же это определение класс
1:54:34
эквивалентности не класса а классов второе это
1:54:39
определение границ этих диапазонов об этом этаже с вами уже поговорили и
1:54:46
третье это проведение трех тестов для границ на самой границе
1:54:54
назначение выше этой границы и назначение меньше этой границы давайте с
1:55:01
вами теперь вернемся к нашему примеру и посмотрим как это работает на практике смотрите мы определились с вами границы
1:55:08
для каждого класса и давайте для примера возьмем такой диапазон как от 18 до 55
1:55:14
что же гласят наши правила то есть мы берем обязательно вот эти граничные значения 1855 а также еще два значения на этой
1:55:23
границе то есть значение меньше и значения больше в данном случае это
1:55:28
будет значение 17 18 сама границы и 19 и так же значение 54 сама граница 55 и 56
1:55:39
если бы мы говорили о в том что наша система может обрабатывать десятичные
1:55:45
дроби тогда бы значение было бы максимально приближена к нашей границе
1:55:51
то здесь мы было значение например 54 и 9
1:55:57
5555 и один если бы у нас из использовался только один знак после запятой то есть это вы должны помнить и
1:56:04
обязательно использовать данные значения как вы могли заметить когда мы используем технику анализа граничных
1:56:10
значений мы также проверяем и тестируем класс эквивалентности то есть
1:56:16
и ковалентные разбиение также у нас задействовано то есть мы берем значение которое также ходит класс
1:56:21
эквивалентности например 54 то есть она входит в этот класс от 18
1:56:27
до 55 и и вполне возможно не проводить дополнительное тестирование уже по этой
1:56:32
технике то есть дизайна так мы убиваем с вами двух зайцев но как я уже говорил в начале нашего урока я бы вам посоветовал
1:56:40
еще тестировать значение на середине данного диапазона
1:56:46
так как это улучшит качество вашего теста и с большей вероятностью позволит
1:56:53
вам не пропустить какое-либо значение которое обрабатывается нашей системой неверно именно две эти техники очень
1:57:01
часто спрашивают на собеседовании не побоюсь повторить это еще раз для вас чтобы вы уложили у себя в голове на что
1:57:09
он стоит обратить внимание при подготовке к собеседованию да вы можете так же прочитать эту книгу про которым
1:57:16
рассказал начале занятия и узнать про попарно и тестирование создание таких
1:57:22
таблиц которые позволяют нам это делать использование такого инструмента как пик
1:57:28
пожалуй это все что я хотел вам рассказать на данном занятии пожалуйста усвоите эту информацию очень хорошо
1:57:36
попрактикуйтесь на других примерах прочитайте книгу легко панд там также
1:57:42
содержатся хорошие примеры на все техники тест дизайна и тогда со спокойной душой вы сможете сказать что
1:57:49
вы разобрались техника т дизайна и будете готовы к вашему интервью а мы же
1:57:55
с вами увидимся на следующем занятии которое будет посвящено оформлению отчетов о дефектах либо же
1:58:02
баг репорт ах так же на этом занятии мы разберемся в жизненном цикле дефекта и научимся с вами работать в такой баг
1:58:10
треккинговой системе как jira поэтому оставайтесь на этом канале подписывайтесь ставьте лайки ваша
1:58:17
обратная связь очень важно для меня а я в свою очередь прощаюсь с вами милости
1:58:22
прошу к нашему шалашу пока [музыка]
1:58:35
привет youtube на сегодняшнем уже десятом уроке мы с вами заканчиваем
Отчет о дефекте. Работа в Jira
1:58:41
первый блок этого курса тестировщик с нуля который был посвящен основным
1:58:46
теоретическим моментом связанным с погружением в профессию тестировщика на
1:58:52
данном занятии мы поговорим с вами о таком тестом артефакте как отчеты
1:58:57
дефекте или как его ещё называют багрепорт именно создавать и реагировать
1:59:02
на fix исправления данного тестового артефакта вы будете чаще всего в своей
1:59:08
работе также мы с вами рассмотрим как на практике заводить дефект в такой
1:59:13
популярный бак треккинговые системе как jira и в конце данного занятия поговорим
1:59:18
о жизненном цикле дефектов что же такое дефект либо же бак это несоответствии
1:59:24
фактического результаты выполнения программы ожидаемому результату дефекты
1:59:30
обнаруживаются на этапе тестирования по когда мы с вами тестировщики проводим
1:59:35
сравнения полученных результатов работы программы и божье компонента мире
1:59:41
дизайна с некоторым ожидаем результатом по песчаным например спецификации либо
1:59:47
требованиях как только мы обнаруживаем бак мы должны его задокументировать
1:59:53
именно документ который позволяет нам это сделать это баг репорт то есть этот
1:59:58
документ содержит полное описание нашего бога и включает информацию как о самом
2:00:04
баги более подробно об этом мы поговорим чуть дальше так и условиях возникновения
2:00:10
данного бага во первых это короткое описание нашей проблемы
2:00:15
если мы говорим о такой баг треккинговые системе как jira то обычно в описании
2:00:20
также прописывают степс твое пробиус то есть шаги воспроизведения данного бага
2:00:26
которые приведут к тому что человек который прочитает данный отчет пройдет
2:00:33
по всем этим шагам и увидят наш результат фактически который получился после того когда он выполнить все шаги
2:00:39
об этом мы поговорим с вами более подробнее когда перейдём непосредственно в саму дыру также есть такое требует как
2:00:46
проект то есть это название нашего проекта вместе мы работаем над приложением которое называется примеру
2:00:53
интернет-магазин тогда здесь в этом поле указывается название этого проекта для
2:00:59
того чтобы в дальнейшем мы могли спокойно проследить какому проекту относится наш багрепорт также может быть
2:01:06
такой атрибут как компонент в котором непосредственно был обнаружен данный
2:01:12
дефект также может быть версия нашего гида то есть версия от той сборки на
2:01:18
который был обнаружен дефект он воспроизводится также есть такое поле как серьезность
2:01:23
на английском она называется 7 лети то есть по сути это критичность нашего бага
2:01:31
то есть о степени влияния данного бака на наше приложение в богатой кинга и
2:01:38
системе си верите обычно обозначает тестировщик ну и в принципе на самом проекте обычно это делает этот человек
2:01:45
также есть такое атрибут как приоритет либо на английском это проверить и
2:01:52
проиграть и обозначает очередь исправление данного бака обычно и и
2:01:58
выставляет pm то есть продакт-менеджер и он решает какой баг будет фиксится первaя опять же
2:02:07
более подробно о серьезности и приоритете то есть и severity прийти мы
2:02:13
поговорим с вами чуть дальше я расскажу вам какие есть и я расскажу вам какие есть оценки данных атрибутов также есть
2:02:21
такой атрибут как статус то есть это статус нашего бога в его жизненном цикле
2:02:28
как я уже сказал же не цикл мы разберем в заключительной части нашего урока также может быть поле автор то есть этот
2:02:36
человек который нашел наш десерт это может быть как тестировщик чаще всего
2:02:42
именно им и является он но также это может быть другой участник проекта либо
2:02:47
команды который обнаружил какой-либо баг в системе и есть такое поле как назначение либо на английском это будет
2:02:55
саян стул и давайте теперь более подробно поговорим о таких атрибутов как сигарете и проявите как я уже сказал
2:03:02
дефекты могут классифицироваться с точки зрения север уйти и проверить и
2:03:07
по-разному давайте поговорим о такой классификации на разных проектах в разных компаниях классификация север
2:03:14
уйти и провел эти может отличаться между собой однако я приведу вам самую
2:03:19
распространенную которая в дальнейшем сможет помочь вам соотнести те степени
2:03:25
влияния которые есть у вас примеру на проекте со тем что буду рассказывать вам
2:03:32
я первых это blocker то есть это такой типа ошибки которая приводит нашу
2:03:38
программу о в нерабочее состояние если мы обнаруживаем такой дефект то
2:03:43
дальнейшей работы с программой или и и функциями попросту невозможно следующий
2:03:48
тип это критику физические дефекты приводят наш ключевой
2:03:54
функционал вне рабочее состояние также это может быть существенные
2:04:00
отклонения от бизнес-логики нашего приложения либо же какая-то неправильная реализация требуемых функций
2:04:07
возможна потеря пользовательских данных в отличие от брокера наше приложение не приходит в абсолютно
2:04:15
нерабочее состояние и в принципе другие функции могут работать нормально поэтому
2:04:20
есть такая градация как critical следующие типы это менеджер и моими ибо
2:04:27
их еще могут называть мажорные и минорные благе давайте поговорим более подробнее них мэйджор это какие-то
2:04:34
серьезные ошибки которые свидетельствуют об отклонении
2:04:40
от бизнес логики или нарушающие работы программы но в то же время они не имеют
2:04:46
физическое воздействие на наше приложение возможно есть некоторые обходной путь ибо его еще могут называть workaround а
2:04:53
когда мы можем в принципе задействовать эту функцию она будет работать каким-то
2:04:59
другим способом но все-таки опять же говоря о степени влияния о ее серьезности для нашего
2:05:05
продукта на достаточно велика следующий пункт это майма либо минорный баг это
2:05:12
какой-то незначительный дефект не нарушающие функционал нашего приложения
2:05:17
но который является несоответствием ожидаемого результата например это может быть ошибка нашего
2:05:24
дизайна и последнее это travel какие-то тривиальные баги по самому названию я
2:05:32
думаю вам уже понятно что это баг который не имеет влияния на функционал
2:05:37
или работу нашей программы но который может быть обнаруживаем но визуально
2:05:42
например это может быть какая-то опечатка в тексте то есть оно не является какой-то серьезной ошибкой но
2:05:49
все-таки есть отклонение ожидаемого и фактического результата опять же говоря
2:05:54
о различных блага треккинговых системах и принятие решения на проекте о том
2:06:00
какие атрибуты должны характеризовать серьезность например не может может не
2:06:05
быть такого класса как блокеры либо же они могут и отсутствовать
2:06:12
тривиальные ошибки возможно боже быть только critical имиджа и майна
2:06:18
опять же обычно на проектах существует документация по процессу который
2:06:24
описывает какие баги должны относиться к каждому из этих классов если же такой
2:06:29
информации на проекте у вас нет то основную информацию о теории связаны именно с такой классификации я вам дал в
2:06:36
рамках данного урока давайте теперь перейдем к такому атрибуту как проявите
2:06:41
либо приоритет как я уже сказал это некая приоритезация исправление наших дефектов то есть
2:06:48
порядок исправления на проекте и обычно проверить и
2:06:53
выставляет то пьяный проекте но если переманит это вполне может быть либо же
2:06:59
и тестировщиков ибо же сам тестировщик который работает с этим благом возможно
2:07:05
даже аналитики которые знают как должна ваши работает система и какие функциональности в данный момент хищные
2:07:12
для нашего пользователя и которые нужно в обязательном порядке доставить заказчику в первую очередь
2:07:19
тогда это может выставлять и аналитик и говоря о классификации дефектов именно с точки зрения проявите
2:07:26
существует сирии самые распространенные это хай
2:07:31
medium и лоу по названию вам уже стала более или менее понятно какие дефекты
2:07:38
будут избавляться в первую очередь конечно же это хай то есть этот бак
2:07:44
должен на быть исправлен как можно быстрее так как он критически влияет на
2:07:49
работоспособность нашей программы если мы говорим о medium то это дефект также
2:07:55
должен быть обязательно исправлен но он не оказывает какое-то критическое воздействие на работу приложения если мы
2:08:02
говорим о low дефектах то ошибка также должно быть исправлено но оно не имеет
2:08:08
критического влияния на программу и устранение может быть отложено на
2:08:14
какой-то более длительный срок зависимости от наличия других более пятидесятых дефектов примере если у нас
2:08:21
есть medium либо хай то в первую очередь мы конечно же будем фиксит баги в
2:08:26
приоритете хай а затем погиб прилететь и media lab мы будем тестировать самом
2:08:32
конце говоря о том совпадает и между собой severity и приедете то есть
2:08:38
например если тестировщик решает что данная функциональность для нашего приложение очень очень критично и и
2:08:45
выставляет сверить их примеру critical либо blocker но в то же время pm
2:08:52
понимает что это можно отложить на более длительный срок и на самом деле это не
2:08:58
так критично для нашего приложения то он может выставлять другой приоритет примеры medium вместо хай часто на
2:09:05
собеседованиях просят привести пример багов с высокой север уйти и низкой
2:09:12
проверить и например а если мы говорим о таких богах то например если у нас есть
2:09:18
какая-то функциональность которая достаточно редко в использовании у
2:09:24
нашего пользователя то если мы понимаем что она не работает мы можем поставить
2:09:29
верите примеру блоки ибо критиков но в то же время наш pm понимаешь что данные
2:09:34
функциональности пользуется большим спросом и позже она не является критичным для работы в нашей системы и
2:09:41
мы можем обойтись на данный момент без нее тогда он решает что приоритет будет то низкий это самый распространенный
2:09:48
пример когда у нас высокая сверить и низкая проявить если мы же говорим по
2:09:53
другой стороне медали когда у нас высокой проиграете диска и сверить и примеру тоже часто приводят
2:10:01
сайт google его главной странице когда вы ее открываете и вы видите опечатку
2:10:07
примеру написано google не с двумя буквами а у ac1 этот бренд достаточно
2:10:13
узнаваемые и такие печатки могут то очень сильно повлиять на репутацию данного бренда но в то же время
2:10:21
серьезность этой ошибки минимально то есть это какая-то опечатка она
2:10:27
тривиальная ошибка но проверить это как это влияет на репутацию будете здесь высокой это также может быть отличным
2:10:35
примером для собеседования более подробно вы можете поискать в интернете
2:10:40
ответ на данный вопрос с примерами я думаю что если вы приведете хотя бы 20
2:10:46
примерно на данный вопрос то это значительно
2:10:51
поднимет ваш шанс успешно пройти собеседование стоит отметить что в некоторых системах
2:10:58
например priority может быть заменено вместо х и medium louna цифры 1234 здесь
2:11:04
логика такая же то есть если у нас цифра 1 то этот дефект мы будем фиксики первую
2:11:10
очередь если цифра 4 то в самую последнюю опять же это может относиться и exe верить там тоже могут быть цифры и
2:11:17
они точно также говорят о том какая серьезность какой атлетичность нашего
2:11:23
дефекта для работы нашей системы давайте теперь
2:11:28
вернемся к атрибутам которые еще могут быть нашим багрепорт он всегда
2:11:34
необходимо указывать окружении на котором был обнаружен данный дефект либо на английском это будет in warm and
2:11:41
говоря об окружении мы имеем ввиду к примеру операционную систему
2:11:46
разрядность этой системы возможно service pack браузер в котором был
2:11:52
обнаружен данный дефект опять же его версии то есть мы подробно здесь расписываем в каком именно окружении был
2:12:00
обнаружен наш дефект также в инвар нити может быть прописано к примеру если у
2:12:06
нас на проекте есть несколько окружений например есть окружение для разработчиков есть окружении стабильные
2:12:13
версии либо его еще называют стейдж алим и есть окружении prada продакшна когда уже в
2:12:21
нем работает наш конечный пользователь давайте с вами пометим эти три вида окружения я расскажу вам тоже немножко
2:12:28
более подробнее них то есть хотите как я уже сказал на каждом из этих окружений работает
2:12:35
определенный круг лиц обычно надев окружении работают разработчики то есть
2:12:41
они туда заливают какие тысячи возможно также подключаются тестировщики к тестированию каких-то отдельных fitch
2:12:47
надев окружение и также могут заводить дефекты и если мы обнаруживаем такие
2:12:54
дефекты на этом окружении мы прописываем в этом более д.ф. второй вид окружении
2:12:59
это стечь на стоит же у нас обычно попадает уже какая-то стабильная версия
2:13:05
нашего приложения на нем чаще всего работают тестировщики и именно на стенд
2:13:13
же доводят это приложение даником определенного состояния и если там не
2:13:19
остается дефектов то такое приложение с этого инвар менты обычно переводится на
2:13:26
стадию прот и уже напрочь у нас работают наши конечный пользователь
2:13:34
опять же на многих курсах не говорят об этих трех окружениях и часто у
2:13:39
начинающих тестировщиков возникает некоторый вопрос на первых within их на которые не приходят что это вообще такое
2:13:46
думаю что после вот такого никого краткого экскурса в эти окружением вам
2:13:51
будет немножко понятнее и вы не будете смотреть большими глазами на вот на
2:13:56
наличие нескольких окружению в вашей будущей компании которые вы будете
2:14:02
работать возвращаясь к описанию поле description как я уже сказал здесь могут
2:14:09
быть прописаны шаги воспроизведения и чаще всего они действительно там прописываются если нет отдельного поля
2:14:16
например в той бог-то единого я системе которые с которой я работаю на своей работе она называется режет fox есть
2:14:23
отдельное поле для степ стали продиус давайте это по мячу краткое название
2:14:30
вы можете найти такой аббревиатуру с осью а это значит степс кейп радиус также
2:14:38
прописывается наш фактический результат на английском это будет xl
2:14:43
опять же можно пропускать слова эк шоу и писать просто резал потому что следующее
2:14:49
где будут который мы прописываем это ожидаемый результат ибо на английском и
2:14:54
to expect g zall и если вы принципе впишите экспорт натуре зал то логично предположить что
2:15:02
первый вырезал от которые вы записали будет экшн так что слово excel можно опускать при оформлении нашего багрепорт
2:15:09
а то есть еще раз повторюсь фактический результат это результат который мы приходим выполнив все шаги по
2:15:16
воспроизведению а expect отрезал от ожидаемых результат это результат
2:15:21
который должен быть в соответствии с нашими требованиями то что мы действительно
2:15:28
должны получить до также стоит отметить что мы ожидаем результате необходимо писать согласно чему вы пришли к такому
2:15:36
выводу что именно такой результат должен быть по совершению шагов из произведений
2:15:42
это может быть ссылка на какое-то требование либо же ссылка на mako по дизайн нашей странице в интернете
2:15:49
то есть обязательно необходимо ссылаться на что-то просто говорить о том что
2:15:54
такой результат должен быть без подкрепления какой-то доказательной базы не стоит и наверное последний из
2:16:03
основного это прикрепленные файлы какие то отдачу обучить и здесь может быть
2:16:10
фото скриншот вашего экрана где будет наглядно видно где воспроизводится ваш
2:16:16
дефект либо же это может быть видео по этим шагам который вы выполняете для
2:16:22
воспроизведения даже вашего дефекта обязательно если мы говорим о скриншоте
2:16:27
необходимо указывать с какими то элементами пусть тебе будет
2:16:34
к примеру красной рамке стрелки какая-то надпись
2:16:40
которое будет характеризовать что вот именно в этом месте происходит дефект чтобы разработчик только взглянув на
2:16:48
данный скриншота мог сразу понять что действительно происходит по результатам
2:16:54
шагов из произведения так как чаще всего разработчик может даже не читать ваши
2:16:59
шаги воспроизведения он знает как работает система и взглянув только на скриншот он может по-быстрому пофиксить
2:17:06
обнаружены в бак особенно если мы говорим о каких-то юных богах баках связанных с дизайном с какими-то
2:17:13
опечатками то есть здесь мы это обязательно все должны когда обозначать на нашем искренне если мы
2:17:20
говорим о видео обязательно смотрите наблюдайте за тем чтобы у вас был отключен на звук который бы записывал
2:17:26
примеру окружения вашем кабинете ибо же окружение с вашего компьютера если мы
2:17:32
конечно не говорим о каких-то дефектов не на связанных с аудиофайлами это также
2:17:37
не очень хорошо сам прекрасно знаю примеры да вчера аще и тестировщик и
2:17:44
отключают это и можно примеру по видео воспроизведению данного бага услышать
2:17:51
музыку которая он слышит либо же разговор в в офисном кабинете лего по
2:17:57
принц пейси это не очень хорошо характеризует вас со стороны тестировщика поэтому обязательно
2:18:04
обращайте на это внимание и видео они должны быть очень длинными
2:18:09
поверьте мне разработчик не захочет смотреть все видео примеру даже в одну
2:18:15
минуту как воспроизводите ваш бак поэтому вы можете опускать некоторые шаги воспроизведения если считаете что
2:18:21
они не так важны а записывать какую-то последнюю части небольшое именно там где
2:18:26
будет наглядно видно как воспроизводится ваш блог также в эти прикрепленные файлы
2:18:32
можно закидывать блоге каких-то ваших ошибок либо же какие-то архивы если мы говорим
2:18:39
о скачивание информации о response of и request их в приложениях об этом мы
2:18:46
будем говорить с вами во второй части нашего курса то все это тоже можно туда
2:18:51
складывать чтобы например разработчик открыв в укрепленный файлы виде логов с
2:18:57
его ошибками которые воспроизводятся также мог их прочитать и быстро среагировать на найденную проблему в
2:19:04
принципе это все что я хотел вам рассказать об основных атрибутов баг репорт а и существует конечно еще
2:19:11
дополнительные все зависит от компании думаю что если вы приведете некоторые
2:19:16
инвестидеи мент по поводу того какие есть еще атрибуты вы найдете очень леной информации в интернете это оставляю на
2:19:24
ваш откуп но какие-то основные вещи я вам рассказал особенно обратите внимание на блок связанный с серьезностью сверить
2:19:32
проверить и приоритетом потому что это достаточно часто спрашивают на
2:19:37
собеседованиях и также не забывайте о том что вам необходимо знать это вот все
2:19:44
для того чтобы успешно пройти собеседование и в дальнейшем
2:19:49
заводить качественные багрепорт и которые не будут вызывать вопросы как у
2:19:55
крема так и у разработчиков вторая часть нашего урока будет посвящена непосредственной практики работает такой
2:20:03
баг треккинговой системе jira что же такое вообще бака треккинговая систему по сути это система которая позволяет
2:20:10
нам вести все наши баг репорты в ней а также она позволяет вообще работать с
2:20:17
нашим проектом то есть сюда добавляются все users to be какие-то требования которые мы должны дальнейшем реализовать
2:20:25
а здесь как я уже сказал ведется работа с бабами также сюда прилетают какие-то и
2:20:31
шью от наших конечных пользователей то есть проблемы которые они действительно обнаруживают в
2:20:38
нашем продукте это так же прилетает например через какой-то службу поддержки
2:20:44
к примеру могут попадать и шоу и сюда как вы видите у нас здесь есть несколько
2:20:50
логических блоках то есть это backlog и спринт не вообще сам сама эта вкладка
2:20:57
называется backlog что же такое boklok когда мы с вами будем говорить о такой гибкой методологии как джоэл и
2:21:03
фреймворке скрам это будет на одном из последующих уроков уже в их блоках
2:21:10
нашего курса то мы более подробно поговорим конечно же о каждый из этих
2:21:17
сущностей ивентов в с кроме но для вашего общего понимания
2:21:23
что backlog это некоторый набор того что мы должны вообще выполнить в
2:21:30
ходе разработки нашего продукта на проекте здесь вообще хранится полностью все то
2:21:37
есть начиная от требований от наших бизнес-аналитиков либо продукт менеджеров заканчивая нашими богами
2:21:43
которые мы вводим в систему также здесь есть спринт спринт это итерация
2:21:49
если вы вспомните урок посвящен ее итерационные модели разработки то я говорил вам о том что итерация это
2:21:55
некоторый промежуток времени за которые мы берем набор функциональности которую
2:22:01
мы должны реализовать и все то что мы реализуем добавляется в наш инкремент то есть уже
2:22:08
какой-то кусок нашего готового продукта вот это спринт либо же операция и в ходе
2:22:16
данной итерации мы выполняем какие-то storie либо же по другому это требования которые мы должны сделать также сидом
2:22:23
offspring добавляются баги которые должны пофиксить наши разработчики возможно здесь будут такие сущности как
2:22:30
и шью то есть проблемы к примеру от наших конечных пользователей получены
2:22:37
в службой поддержки наших пользователей также они сюда могут добавляться обычно
2:22:42
это решают в рамках такое церемонии как planning митинг когда собирается вся
2:22:49
команда и решает что мы будем реализовывать в данный спринт опять же
2:22:57
все это более подробно мы разберём с вами в рамках следующих уроков сейчас
2:23:05
нас больше интересует оформление багрепорт of в данной системе также хочу
2:23:10
отметить что попробовать работал jiri вы можете самостоятельно и абсолютно бесплатно есть специальная версия этого
2:23:17
программного обеспечения для того чтобы пользователи могли обучиться ей достаточно зайти на
2:23:25
официальный сайт компании atlassian который непосредственно занимается разработкой данного тула как jira и там
2:23:32
можно нажать на кнопку трой ту фри и тогда вы сможете зарегистрироваться и работать
2:23:39
jiri также как я сейчас сейчас это же создал для себя бесплатный аккаунт водитель этом есть ограничения по
2:23:45
количеству пользователей которые могут в ней работать если не ошибаюсь тысяч человек но для каких-то учебных целей
2:23:51
это вполне достаточно давайте с вами создадим наш первый баг багрепорт для этого вы видите здесь
2:23:59
есть кнопка create мы нажимаем на нее и у нас открывается окно для создания
2:24:05
нашего бага как я уже говорил о есть такой трибут как project у меня он уже
2:24:11
создана это тестовый проект я его так и назвал тест едите больше у нас проектов
2:24:17
нет ищу type это название нашей сущности
2:24:22
который мы будем использовать в данном случае это баг также здесь есть историк
2:24:27
примеру это наше требование о epic это какой-то набор наших требований которые
2:24:33
объединены между собой то есть это большая функциональность которую мы должны доставить нашему пользователь
2:24:38
история то уже какой-то более конкретно те было необычно она прописывается формате и юзер стори в формате юзер
2:24:45
стори мы тоже с вами поговорим чуть позже на последующих уроках а тоски это непосредственно те задания которые
2:24:51
выполняют тот или иной участник команды когда планирует свою работу на операцию
2:24:59
нас интересует такая сущность как бак самаре это название нашего бага давайте
2:25:06
пока оставим так так как по названию также у меня есть некоторые замечания которые вы должны использовать при
2:25:14
создании заголовка вашего баг репорт а поле дискрипшн как я уже сказала мы
2:25:21
расписываем шаги по воспроизведению наш практический результат и ожидаемый
2:25:27
результат также иногда есть такой блок как при conditions где мы расписываем
2:25:32
какие-то предусловия например что для того чтобы воспроизвести наш дефекта уже
2:25:38
в системе был создан user с такими-то данными для того чтобы просто не перегружать
2:25:45
наши шаги по воспроизведению и в принципе разработчик уже будет знать что ему необходимо сделать для того чтобы в
2:25:52
дальнейшем воспроизвести наш дефект вы портя это в принципе автор нашего дефекта в данном
2:25:59
случае это я тег сверстниц пока мы не пишем сюда и
2:26:04
дальше вам расскажу что это такое прайор эти как я рассказал это приоритет наше
2:26:10
выполнение policy верите я что ты здесь не вижу
2:26:15
как вы едите это все можно кастом айзек то есть для ваших нужд для проекта могут
2:26:21
использоваться только некоторые филда из всех возможных ну как вы видите полисе
2:26:27
берите здесь нету много раз верите мы с вами уже поговорили поэтому будем пользоваться таким атрибутом как
2:26:33
проверить лейбл либо же в других системах это может вызываться tex это такие руки которые
2:26:40
позволяют нам в дальнейшем провести поиск по jiri наших банков то есть как
2:26:45
то их тоже классифицировать между собой объединять января минут как я уже сказал это окружение
2:26:51
это чем от сюда мы загружаем какие-то скриншоты его же
2:26:56
видеофайлы линк и shews и сама ешь yoshida мы можем линковать
2:27:02
наше требование примеру которые связаны с нашим богам
2:27:08
войны это тот человек который в дальнейшем будет
2:27:14
текст наш бак обычно со и не на крупных проектах означает продакт-менеджер но
2:27:19
если проект небольшой это вполне может быть и тестировщику но может также назначать человека epic link это линка
2:27:27
на наш epic и спринт сюда мы указываем ту итерацию в
2:27:32
которой необходимо будет посетить наш бак давайте списание попробуем завести какой-нибудь багрепорт например возьмем
2:27:40
страницу логина в наше приложение и примеру там съехала какая-то кнопка что
2:27:46
касается правильного наименования нашего банка существует такое правило вы должны обязательно ответить на три вопроса в
2:27:54
заголовке где что и когда где это может
2:27:59
быть название вашего модуля в котором вы обнаружили ваш бак что это
2:28:04
непосредственно что происходит когда вы обнаруживаете ваш бак то есть то
2:28:10
к чему привел ваш дефект и когда при каких условиях это происходит
2:28:16
например если мы говорим о странице логином систему можем так и записать логин пейдж это наш модуль где
2:28:24
происходит наш дефект что происходит например батин
2:28:31
сайт и из дисплей ст-авто
2:28:36
клыки пользы печь смотрите здесь мы с вами учили как раз
2:28:43
ответы на эти три вопроса во-первых где в нашем модуле то logging ныть что произошло кнопка assign смещается и при
2:28:52
каких условиях после нажатия на страницу здесь мы учли все вот эти аспекты при
2:28:59
формировании нашему заголовка пожалуйста запомните это и в дальнейшем используйте что касается description давайте начнем
2:29:07
с шагов из произведения также как я уже сказал здесь будет атрибут резал это наш
2:29:13
excel резал i expected же залп это hdmi интер для того чтобы наш дефект
2:29:22
был понятен разработчику и в принципе тем людям которые в дальнейшем будут работать с
2:29:28
ним лучше всего его форматировать то есть применять какие-то стили к его оформлению в jiri это можно сделать
2:29:36
двумя способами во-первых можете как в ворде просто выделить ваш текст и нажать
2:29:41
на тот определенный стиль шрифта как вы
2:29:46
видите сразу появляется две звездочки которые в принципе и показывают тот факт что с tear будет то
2:29:53
жирным шрифтом если ближним с вами на такую кнопку мы с вами сможем увидеть предварительный просмотр и действительно
2:30:00
наша из tear выделено жирным то есть мы можем сразу звездочками определять где у
2:30:07
нас будет жирный шрифт теперь что касается самих шагов воспроизведений здесь мы расписываем все
2:30:13
то что приведет в дальнейшем к воспроизведению нашего детектор давайте
2:30:18
напишем следующие во-первых мы здесь пишем что мы открываем о пользе
2:30:24
логин punch если мы работали на реальном проекте нас возможно уже было линка на
2:30:29
неё не могли бы ее вставить сюда того чтобы упростить себе работу и сразу могли перейти на вот эту страницу
2:30:37
дальше мы пишем navi гейтсу за сайт им bottom и последний шаг мы нажимаем на
2:30:45
этой странице принципе такие шаги воспроизведения вполне достаточно и того чтобы разработчик смог в дальнейшем наш
2:30:52
бак воспроизвести и опять же для того чтобы нам отформатировать этот текст мы можем сделать это двумя способами
2:30:59
во-первых выбрать список именно с числами нам был лист
2:31:05
либо же поставить решетку перед каждым шагом воспроизведение ведь выделяем это
2:31:11
между собой чтобы было наглядно видно отдельные блоки и если мы с вами нажмем
2:31:17
на предварительный просмотр мы с вами видим что да действительно эти шаги у
2:31:23
нас обозначены цифрами как шел изолт у нас будет таким же как и заголовок
2:31:30
вообще рекомендуют придумывать другое наименование для заголовка но я обычно
2:31:35
пользуюсь таким методом так как это достаточно упрощает работу и в принципе
2:31:40
здесь все понятно как бы не нужно выдумывать велосипед и экспорт связал
2:31:46
это с что мы действительно должны были увидеть после того как
2:31:51
нажимаем на какое-то пустое место на странице давайте наши кортизол следующим за бортом сайн ин излагает он запечь и к
2:32:00
динке mockups если бы у нас были какие-то mockup мы уже какой-то системе например
2:32:07
фильме мы могли просто скопировать ссылку на этот маг об ее с помощью гиперссылки ставить я сюда и так же
2:32:15
после нажатия на эту гиперссылку разработчик сразу переходил на необходимый ему mockup и мог увидеть как
2:32:23
10 я должна себя было вести система и где должна была находиться кнопка сейн и
2:32:28
если мы нажмём с вами опять же на предварительный просмотр мы увидим как выбить прожить эффект принципе меня
2:32:34
вполне устраивает как он выглядит и не думаю что возникнут какие то вопросы
2:32:39
по его воспроизведений дефект статочно простое поэтому мы здесь не выдумали
2:32:45
какой-то велосипед говоря о шагах воспроизведения старайтесь не выдумывать
2:32:51
огромное их количество может можно между собой их объединять рекомендует
2:32:58
использовать от семи до десяти шагов максимально лучше конечно чтобы их было даже меньше но в то же время старайтесь
2:33:06
писать их так чтобы было понятно что происходит и если шаги логично нельзя
2:33:13
между собой будут лучше их не объединяете чтобы потом не возникло недопонимания со стороны разработчика
2:33:19
либо же того человека который вообще впервые видит вашу систему например если мы говорим о каких-то начинающих
2:33:25
тестировщиков которые в дальнейшем будут учиться создавать баги она снова нить того что вы когда-то сделали в этой
2:33:32
системе либо же вы уволить их примеру и человек будет дальнейшем работать с
2:33:38
вашими богами которые были созданы но не пофикшен момент того когда вы ушли из
2:33:45
компании старайтесь это все делать так чтобы все люди которые будут дальнейшем
2:33:52
взаимодействовать с багрепорт там могли спокойно его прочитать и все это дело воспроизвести так смотрите более fix
2:34:00
вверх шанс обычно заполняется уже после того когда баг пофиксили
2:34:05
это делает уже разработчик сейчас вы видите вы не можете выбрать эту версию
2:34:12
фикса по проварите как я уже вам сказал это дефект у нас войны и
2:34:19
он не несет какую-то критическую на себе нагрузку поэтому здесь можно выставить
2:34:25
приоритет наверное лоу или даже логос таким сказал обычно прилетят выставляет
2:34:32
1 акте все эти к сожалению this нету но опять же сверить и здесь также было бы
2:34:39
низкая к примеру это было бы travel по лейблам здесь вы можете вносить
2:34:45
какие-то свои лейблы либо если они уже есть системе не будут вам показываться вдруг дауни выпадающем списке опять же
2:34:53
это сделали того чтобы упростить работу по поиску вашего дефектов в окружению
2:34:59
здесь вы можете написать версию вашей системы у меня это windows
2:35:05
т.н. я думаю что все прекрасно знают как
2:35:10
посмотреть версию вашей системы зайти в этот компьютер нажать свойства и
2:35:19
здесь у нас видите написано видос т.н. корпоративные витязь и это все мы должны
2:35:25
скопировать и вставить в наш баг репорт также указать разрядность нашей системы
2:35:30
я сейчас это делать не буду но я думаю вы понимаете как и должно работать и говоря о браузере например на котором
2:35:38
это было обнаружено вас это google chrome тоже в браузере вы просто открываете
2:35:44
справку о браузер google chrome и копируйте версию
2:35:51
[музыка] так как у нас нет только тихо окружения
2:35:58
и df стейдж или просто здесь вы тоже ничего из этого не указан говоря о
2:36:05
скринах давайте своим покажу как это можно сделать на примере далеком от
2:36:13
нашего бога но вы в принципе сможете понять вообще как это должно работать
2:36:19
до есть платные и бесплатные скриншот иры которые позволяют это все делать
2:36:24
делать скриншот редактировать его наверное из бесплатных самый распространенный ташир x который я
2:36:31
использую и он удобен достаточно в работе из платных это снизит он
2:36:37
достаточно часто используется войти компания здесь мы с вами можем выбрать
2:36:42
непосредственно та область которая нас интересует
2:36:52
сейчас делается с клин и отредактировать изображение например у нас здесь
2:37:02
нужно было быть написан на нее так мент а к примеру вложения вести обозначаю
2:37:08
где у нас непосредственно наблюдается дефект красным прямоугольником
2:37:14
так же могу использовать стрелку для того чтобы также акцентировать внимание
2:37:19
и написать текст с каким-то описанием примеру
2:37:26
затачиваем счет и hold уважение и
2:37:34
вот в принципе так хорошо выглядит наш screen и когда разработчик только
2:37:42
взгляни на него он поймет где ошибка сохраняем картинку
2:37:47
и попросту перетаскиваем меню [музыка]
2:37:53
честно подгрузится [музыка] она загрузилась
2:38:03
ученик появилась здесь есть потом уже можно будет открыть этот
2:38:08
итачи посмотреть действительно как но и отображается эта кнопка
2:38:15
дальше взаимосвязям здесь можно расписывать какому типу сущности относится данный
2:38:23
баг то есть носит вам к этой сущности блокирует он ее работу заблокирована и
2:38:29
данная функциональность другой функциональностью является ли это клоном
2:38:35
какой-то функциональности возможно это какой-то дубликат другого богат и все это мы можем здесь указывать обычно
2:38:42
указывают клюва и титул исы у нас сейчас несколько в системе давайте возьмем
2:38:48
именно баг репорт creation сцене у нас автоматически будет
2:38:54
назначаться на 5 же как я говорил обычно это нас назначает пены проекте либо же
2:39:00
на небольших проектах это назначает тестировщик epic link если бы нас было и пик не
2:39:07
могли тоже бы привязать из принца на котором она необходима
2:39:13
пофиксить данный баг также мы здесь обозначаем также вы можете нажать крепина за
2:39:20
поставить baxik тогда данный баг у вас
2:39:26
создастся и в дальнейшем у вас откроется окно которое позволит вам не заполняя
2:39:34
какие-то другие поля использовать быть заполнены и и создавать несколько багов одновременно
2:39:40
если вы просто нажмите клеить то тогда это окно полностью закроется вам необходимо будет заново вводить все
2:39:47
данные принципе можем с вами сейчас это проверить систем нажимаем create наш и шью как видите успешно была создана
2:39:56
наш бак него появилась идентификатор название проекта и номер сущности в нашей системе
2:40:03
и вот здесь у нас сохранились уже некоторые атрибуты которые мы в
2:40:09
дальнейшем можем не заполнять а использовать уже при заполнены
2:40:15
здесь у нас также обновилась информация в спринт у нас ушел этот бак здесь у нас
2:40:21
есть таблица по статусам что у нас в работе что у нас прогрессе что уже
2:40:28
выполнено также позволяет нашему крему продукт-менеджер следить за эффективностью команды как она вовремя
2:40:34
все исполняет и мы сами можем непосредственно открыть наш вак его про редактировать случае если нас какие-то
2:40:41
были проведены изменения внизу у нас отражаются все
2:40:46
изменения которые мы проводим в нашем баги вы сидите наш бак был пропатчен он
2:40:53
был создан то есть все что мы будем здесь изменять также будет отражаться в хистори также могут быть какие-то
2:40:59
комментарии написанные вами либо другими участниками команды по данному
2:41:05
бабу и все эти здесь можно делать и costama жить по-своему также вы можете проводить поиск
2:41:12
обычный поиск либо же продвинутый поиск мы не будем с вами сейчас более подробно
2:41:18
останавливаться на дать им возможно у нас будет какой-то дополнительный урок связаны с продвинутым поиском ejiry но
2:41:26
как я вижу данный урок уже очень сильно затянулся поэтому давайте перейдем к последней заключительной части данного
2:41:32
урока последняя часть нашего урока будет посвящена жизненному циклу дефекта
2:41:37
давайте представим что вы нашли какой-то баг он появился в жизни ваше и в жизни
2:41:42
вашего проекта и какую любой жизненной формы у него есть жизнью цикл поэтому
2:41:49
давайте более подробно поговорим о нем когда мы с вами говорили об атрибутах
2:41:54
баг репорт а мы говорили о его статусе вот именно про эти статусы и идет
2:42:01
разговоров в блоку посвященному жизненному циклу смотрите как только наш
2:42:08
багрепорт создается в системе его статус new то есть он новый тестировщик нашел
2:42:15
баг дефект успешно будут занесены факторинговую систему некоторые бактерии системах вот этот вот
2:42:23
статус может называться прополз после этого наша дефект переходит в статус
2:42:29
опыт и божиего еще могут назвать сайт либо же актив когда наш дефект уже был
2:42:36
направлен на работу девелоперу нашим продукт менеджером либо же вами если мы говорим о небольшом
2:42:43
каком-то проекте небольшой команде а небольшой компании и в зависимости от
2:42:50
решения нашего product manager а наш бак может быть также отложен то есть
2:43:01
исправление данного бага не несет какой-то ценности на данном этапе разработки или по каким-то другим
2:43:07
причинам его исправление будет проведена в
2:43:13
дальнейшем может быть других операций в других средах опять же это решает наша продукт менеджер если же все таки наш